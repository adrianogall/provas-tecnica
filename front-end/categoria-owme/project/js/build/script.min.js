
/*
    
*/


//Variáveis iniciais
var numPage = 1,
    qntPage = 20,
    xmlhttp = new XMLHttpRequest(),
    url = "../../project/files/mock-products.json",
    getUrl = getUrl(),
    filter= "valor-desc";
    
//Verifica de tem parâmetros de filtros passados na url no carregamento da página
if(getUrl.hasOwnProperty('q')){  

    filter = getUrl.q;
    if(getUrl.hasOwnProperty('page'))
        numPage = getUrl.page;
} 

getStartListProd(filter,numPage);

//Faz leitura do arquivo json e inicia a construção do filtro
function getStartListProd(filter, numPage){

    xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            objJsonProd = JSON.parse(this.responseText).products;
            orderFilterJson(objJsonProd, filter, numPage);
        }
    };

    xmlhttp.open("GET", url, true);
    xmlhttp.send();
}    

//Contrutor da listagem de produtos
function constListProducts(arrProd, numPage) {

    var htmlListProd = "",
        targetProd = parseInt(numPage) * parseInt(qntPage),
        i2 = 0;

    for(var i = 0; i < arrProd.length; i++) {
        if(targetProd < i && i2 < qntPage){
            htmlListProd += `<li>
                                <div class="cont">
                                    <a class="link" href="javascript:void(0)" title="`+arrProd[i].name+`" class="`+arrProd[i].name+`"></a>
                                    <div class="thumb"><img alt="`+arrProd[i].name+`" title="`+arrProd[i].name+`" src="`+arrProd[i].image+`"></div>
                                    <div class="desc">
                                        <h3>`+arrProd[i].name+`</h3>
                                        <p> <span>`+arrProd[i].price+`</span></p>
                                    </div>
                                </div>
                            </li>`;
            i2++;
        }                       
    }
    document.getElementById("list-products").innerHTML = htmlListProd;
}

//Busca os parâmetros da url para executar alistagem de produtos
function getUrl(){

    var query = location.search.slice(1);
    var partes = query.split('&');
    var data = {};

    partes.forEach(function (parte) {
        if(parte != ''){
            var chaveValor = parte.split('=');
            var chave = chaveValor[0];
            var valor = chaveValor[1];
            data[chave] = valor;
        }            
    });
    return data;
}

//Contrutor da paginação
function constPaginator(objList, filter, numPage){

    var qntTotal = Object.keys(objList).length,
        htmlListPag = "",
        contrPag = parseInt(qntTotal) / parseInt(qntPage);
        
    for(var i = 1; i < contrPag; i++) {
        if(numPage == i)
            htmlListPag += `<li class="active"><span>`+i+`</span></li>`;
        else
            htmlListPag += `<li><a href="javascript:void(0)" onClick="getStartListProd('`+filter+`',`+i+`);">`+i+`</a></li>`;             
    }
    document.getElementById("pag-prod-nav").innerHTML = htmlListPag;
}

//Ordena o abjeto de produtos de acordo com o filtro
function orderFilterJson(objList, filter, numPage){ 

    var arrFilter = filter.split('-');
    objList.sort(dynamicSort(arrFilter));   
    var arrProd = Object.values(objList);
    
    //Construtor da listagem de produtos
    constListProducts(arrProd, numPage);
    
    //Construtor da paginação
    constPaginator(objList, filter, numPage);
}

//Ordena o object de produtos conforme os parâmetros passados
function dynamicSort(arrtFilter) {

    var sortOrder = 1;
    if(arrtFilter[0] === "-") {
        sortOrder = -1;
        arrtFilter = arrtFilter.substr(1);
    }

    return function (a,b) {
        if(arrtFilter[1] == 'asc')
            var result = (a[arrtFilter[0]] < b[arrtFilter[0]]) ? -1 : (a[arrtFilter[0]] > b[arrtFilter[0]]) ? 1 : 0;
        else
            var result = (a[arrtFilter[0]] > b[arrtFilter[0]]) ? -1 : (a[arrtFilter[0]] < b[arrtFilter[0]]) ? 1 : 0;
        return result * sortOrder;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InNjcmlwdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLypcclxuICAgIFxyXG4qL1xyXG5cclxuXHJcbi8vVmFyacOhdmVpcyBpbmljaWFpc1xyXG52YXIgbnVtUGFnZSA9IDEsXHJcbiAgICBxbnRQYWdlID0gMjAsXHJcbiAgICB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXHJcbiAgICB1cmwgPSBcIi4uLy4uL3Byb2plY3QvZmlsZXMvbW9jay1wcm9kdWN0cy5qc29uXCIsXHJcbiAgICBnZXRVcmwgPSBnZXRVcmwoKSxcclxuICAgIGZpbHRlcj0gXCJ2YWxvci1kZXNjXCI7XHJcbiAgICBcclxuLy9WZXJpZmljYSBkZSB0ZW0gcGFyw6JtZXRyb3MgZGUgZmlsdHJvcyBwYXNzYWRvcyBuYSB1cmwgbm8gY2FycmVnYW1lbnRvIGRhIHDDoWdpbmFcclxuaWYoZ2V0VXJsLmhhc093blByb3BlcnR5KCdxJykpeyAgXHJcblxyXG4gICAgZmlsdGVyID0gZ2V0VXJsLnE7XHJcbiAgICBpZihnZXRVcmwuaGFzT3duUHJvcGVydHkoJ3BhZ2UnKSlcclxuICAgICAgICBudW1QYWdlID0gZ2V0VXJsLnBhZ2U7XHJcbn0gXHJcblxyXG5nZXRTdGFydExpc3RQcm9kKGZpbHRlcixudW1QYWdlKTtcclxuXHJcbi8vRmF6IGxlaXR1cmEgZG8gYXJxdWl2byBqc29uIGUgaW5pY2lhIGEgY29uc3RydcOnw6NvIGRvIGZpbHRyb1xyXG5mdW5jdGlvbiBnZXRTdGFydExpc3RQcm9kKGZpbHRlciwgbnVtUGFnZSl7XHJcblxyXG4gICAgeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQgJiYgdGhpcy5zdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIG9iakpzb25Qcm9kID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCkucHJvZHVjdHM7XHJcbiAgICAgICAgICAgIG9yZGVyRmlsdGVySnNvbihvYmpKc29uUHJvZCwgZmlsdGVyLCBudW1QYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHhtbGh0dHAub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG4gICAgeG1saHR0cC5zZW5kKCk7XHJcbn0gICAgXHJcblxyXG4vL0NvbnRydXRvciBkYSBsaXN0YWdlbSBkZSBwcm9kdXRvc1xyXG5mdW5jdGlvbiBjb25zdExpc3RQcm9kdWN0cyhhcnJQcm9kLCBudW1QYWdlKSB7XHJcblxyXG4gICAgdmFyIGh0bWxMaXN0UHJvZCA9IFwiXCIsXHJcbiAgICAgICAgdGFyZ2V0UHJvZCA9IHBhcnNlSW50KG51bVBhZ2UpICogcGFyc2VJbnQocW50UGFnZSksXHJcbiAgICAgICAgaTIgPSAwO1xyXG5cclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcnJQcm9kLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYodGFyZ2V0UHJvZCA8IGkgJiYgaTIgPCBxbnRQYWdlKXtcclxuICAgICAgICAgICAgaHRtbExpc3RQcm9kICs9IGA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJsaW5rXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIHRpdGxlPVwiYCthcnJQcm9kW2ldLm5hbWUrYFwiIGNsYXNzPVwiYCthcnJQcm9kW2ldLm5hbWUrYFwiPjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRodW1iXCI+PGltZyBhbHQ9XCJgK2FyclByb2RbaV0ubmFtZStgXCIgdGl0bGU9XCJgK2FyclByb2RbaV0ubmFtZStgXCIgc3JjPVwiYCthcnJQcm9kW2ldLmltYWdlK2BcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRlc2NcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5gK2FyclByb2RbaV0ubmFtZStgPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiA8c3Bhbj5gK2FyclByb2RbaV0ucHJpY2UrYDwvc3Bhbj48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xyXG4gICAgICAgICAgICBpMisrO1xyXG4gICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaXN0LXByb2R1Y3RzXCIpLmlubmVySFRNTCA9IGh0bWxMaXN0UHJvZDtcclxufVxyXG5cclxuLy9CdXNjYSBvcyBwYXLDom1ldHJvcyBkYSB1cmwgcGFyYSBleGVjdXRhciBhbGlzdGFnZW0gZGUgcHJvZHV0b3NcclxuZnVuY3Rpb24gZ2V0VXJsKCl7XHJcblxyXG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24uc2VhcmNoLnNsaWNlKDEpO1xyXG4gICAgdmFyIHBhcnRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG5cclxuICAgIHBhcnRlcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0ZSkge1xyXG4gICAgICAgIGlmKHBhcnRlICE9ICcnKXtcclxuICAgICAgICAgICAgdmFyIGNoYXZlVmFsb3IgPSBwYXJ0ZS5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICB2YXIgY2hhdmUgPSBjaGF2ZVZhbG9yWzBdO1xyXG4gICAgICAgICAgICB2YXIgdmFsb3IgPSBjaGF2ZVZhbG9yWzFdO1xyXG4gICAgICAgICAgICBkYXRhW2NoYXZlXSA9IHZhbG9yO1xyXG4gICAgICAgIH0gICAgICAgICAgICBcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbi8vQ29udHJ1dG9yIGRhIHBhZ2luYcOnw6NvXHJcbmZ1bmN0aW9uIGNvbnN0UGFnaW5hdG9yKG9iakxpc3QsIGZpbHRlciwgbnVtUGFnZSl7XHJcblxyXG4gICAgdmFyIHFudFRvdGFsID0gT2JqZWN0LmtleXMob2JqTGlzdCkubGVuZ3RoLFxyXG4gICAgICAgIGh0bWxMaXN0UGFnID0gXCJcIixcclxuICAgICAgICBjb250clBhZyA9IHBhcnNlSW50KHFudFRvdGFsKSAvIHBhcnNlSW50KHFudFBhZ2UpO1xyXG4gICAgICAgIFxyXG4gICAgZm9yKHZhciBpID0gMTsgaSA8IGNvbnRyUGFnOyBpKyspIHtcclxuICAgICAgICBpZihudW1QYWdlID09IGkpXHJcbiAgICAgICAgICAgIGh0bWxMaXN0UGFnICs9IGA8bGkgY2xhc3M9XCJhY3RpdmVcIj48c3Bhbj5gK2krYDwvc3Bhbj48L2xpPmA7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBodG1sTGlzdFBhZyArPSBgPGxpPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBvbkNsaWNrPVwiZ2V0U3RhcnRMaXN0UHJvZCgnYCtmaWx0ZXIrYCcsYCtpK2ApO1wiPmAraStgPC9hPjwvbGk+YDsgICAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhZy1wcm9kLW5hdlwiKS5pbm5lckhUTUwgPSBodG1sTGlzdFBhZztcclxufVxyXG5cclxuLy9PcmRlbmEgbyBhYmpldG8gZGUgcHJvZHV0b3MgZGUgYWNvcmRvIGNvbSBvIGZpbHRyb1xyXG5mdW5jdGlvbiBvcmRlckZpbHRlckpzb24ob2JqTGlzdCwgZmlsdGVyLCBudW1QYWdlKXsgXHJcblxyXG4gICAgdmFyIGFyckZpbHRlciA9IGZpbHRlci5zcGxpdCgnLScpO1xyXG4gICAgb2JqTGlzdC5zb3J0KGR5bmFtaWNTb3J0KGFyckZpbHRlcikpOyAgIFxyXG4gICAgdmFyIGFyclByb2QgPSBPYmplY3QudmFsdWVzKG9iakxpc3QpO1xyXG4gICAgXHJcbiAgICAvL0NvbnN0cnV0b3IgZGEgbGlzdGFnZW0gZGUgcHJvZHV0b3NcclxuICAgIGNvbnN0TGlzdFByb2R1Y3RzKGFyclByb2QsIG51bVBhZ2UpO1xyXG4gICAgXHJcbiAgICAvL0NvbnN0cnV0b3IgZGEgcGFnaW5hw6fDo29cclxuICAgIGNvbnN0UGFnaW5hdG9yKG9iakxpc3QsIGZpbHRlciwgbnVtUGFnZSk7XHJcbn1cclxuXHJcbi8vT3JkZW5hIG8gb2JqZWN0IGRlIHByb2R1dG9zIGNvbmZvcm1lIG9zIHBhcsOibWV0cm9zIHBhc3NhZG9zXHJcbmZ1bmN0aW9uIGR5bmFtaWNTb3J0KGFycnRGaWx0ZXIpIHtcclxuXHJcbiAgICB2YXIgc29ydE9yZGVyID0gMTtcclxuICAgIGlmKGFycnRGaWx0ZXJbMF0gPT09IFwiLVwiKSB7XHJcbiAgICAgICAgc29ydE9yZGVyID0gLTE7XHJcbiAgICAgICAgYXJydEZpbHRlciA9IGFycnRGaWx0ZXIuc3Vic3RyKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYSxiKSB7XHJcbiAgICAgICAgaWYoYXJydEZpbHRlclsxXSA9PSAnYXNjJylcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IChhW2FycnRGaWx0ZXJbMF1dIDwgYlthcnJ0RmlsdGVyWzBdXSkgPyAtMSA6IChhW2FycnRGaWx0ZXJbMF1dID4gYlthcnJ0RmlsdGVyWzBdXSkgPyAxIDogMDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAoYVthcnJ0RmlsdGVyWzBdXSA+IGJbYXJydEZpbHRlclswXV0pID8gLTEgOiAoYVthcnJ0RmlsdGVyWzBdXSA8IGJbYXJydEZpbHRlclswXV0pID8gMSA6IDA7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAqIHNvcnRPcmRlcjtcclxuICAgIH1cclxufSJdfQ==